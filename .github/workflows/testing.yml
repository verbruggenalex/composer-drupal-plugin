name: Testing repository

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Start environment
      run: |
        sudo chown -R 1001:1000 .
        docker-compose up -d
        sleep 30

    - name: Composer cache
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Composer install
      run: |
        docker-compose exec -T web composer install --prefer-dist --no-progress --no-suggest --ansi

    - name: Static code check
      run: |
        docker-compose exec -T web ./vendor/bin/grumphp run --no-ansi

    - name: Initialize a Drupal composer.json
      run: |
        docker-compose exec -T -w ${PWD}/build web ../vendor/bin/robo drupal:extend --name="verbruggenalex/project" --description="Test project" -n

    - name: Test installing composer.json
      run: |
        docker-compose exec -T -w ${PWD}/build -e COMPOSER_MEMORY_LIMIT=-1 web composer install --no-progress --no-suggest --ansi

    - name: Normalize composer.json
      run: |
        docker-compose exec -T -w ${PWD}/build web composer normalize --no-check-lock --no-update-lock --ansi

    - name: Run phpcs on build folder.
      run: |
        docker-compose exec -T -w ${PWD}/build web composer test-phpcs

    - name: Test installing Drupal
      run: |
        docker-compose exec -T -w ${PWD}/build web ./vendor/bin/drush si --db-url=mysql://root:@mysql:3306/drupal standard -y

    - name: Run behat tests on Drupal installation
      run: |
        docker-compose exec -T -w ${PWD}/build web composer test-behat

    # The following steps are only executed on the tag event.
    - name: Compress build folder
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        tar -czvf build.tar.gz build/

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build.tar.gz
        asset_name: build.tar.gz
        asset_content_type: application/gzip
